# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, ROS-Industrial
# This file is distributed under the same license as the Industrial Training
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Industrial Training \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-11 17:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../_source/session2/ros2/0-Services.md:1 71d7f7c925834d8d848166a74b1f6e37
msgid "Services"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:2 72c8338ca72e4f24befba32ac4c7a2bc
msgid ""
"In this exercise, we will create a custom service by defining a .srv "
"file. Then we will write server and client nodes to utilize this service."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:4 ce10a14985f944b58f80d7a98d3b5d23
msgid "Motivation"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:5 123921ea14cd4e6398765b8c7d422102
msgid ""
"The first type of ROS communication that we explored was a one-way "
"interaction called messages which are sent over channels called topics. "
"Now we are going to explore a different communication type, which is a "
"two-way interaction via a request from one node to another and a response"
" from that node to the first. In this module we will create a service "
"server (waits for request and comes up with response) and client (makes "
"request for info then waits for response)."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:7 a68f8c30acf441038720e2bfd9b962d4
msgid "Reference Example"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:9 11975890ee884e15947111605a8cbe8d
msgid "Create a Service Server/Client"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:11
#: 444e2e95459e4bf6b36f12db8e8c3533
msgid "Further Information and Resources"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:13
#: 9fa288e443e14e21abcf074dd29264c7
msgid "Creating Messages & Services"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:14
#: f555f85683c248b686b7c68d1919a32c
msgid "Understanding Services"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:16
#: 7b2786cc1d494e8e89bde7e51d6a22d3
msgid "Scan-N-Plan Application: Problem Statement"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:17
#: d7cf756c5c5e4d7b90f55ca58f1355d0
msgid ""
"We now have a base ROS node which is subscribing to some information and "
"we want to build on this node. In addition we want this node to serve as "
"a sub-function to another \"main\" node. The original vision node will "
"now be responsible for subscribing to the AR information and responding "
"to requests from the main workcell node."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:19
#: 78142f945bc747bc85817fd952406355
msgid "Your goal is to create a more intricate system of nodes:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:21
#: 73db680a884e4f9d84d36f706d24884a
msgid "Update the vision node to include a service server"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:23
#: bfdb8122de48483a816a12741f17d089
msgid "Create a new node which will eventually run the Scan-N-Plan App"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:24
#: 24ff5993b3504402ba0dd228c1a683aa
msgid ""
"First, we'll create the new node (myworkcell_core) with only a simple "
"service client.  We will later add more code to build up the full "
"application control node."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:26
#: 182e65e1dbea41bdabe4290625ac5dee
msgid "Scan-N-Plan Application: Guidance"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:28
#: eb6c6becd7f4437e910347da2882a3b7
msgid "Create Service Definition"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:30
#: 9032911a70a8481db426aeac855359e6
msgid ""
"Similar to the message file located in the fake_ar_publisher package, we "
"need to create a service file. The following is a generic structure of a "
"service file:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:38
#: 95ddb44156824dc8b8936557372ccc3f
msgid ""
"Create a folder called srv inside your myworkcell_core package (at same "
"level as the package's src folder)"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:45
#: b78c7429699d46a4a69b87da05945b73
msgid "Create a file (gedit or QT) called LocalizePart.srv inside the srv folder."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:47
#: 0f1d7094dc6e4280ad733d878529274c
msgid ""
"Inside the file, define the service as outlined above with a request of "
"type string named base_frame and a response that has a geometry_msgs/Pose"
" field named pose, and a boolean field named success:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:58
#: bd876361b95745cebc1c037a51535acd
msgid ""
"It is good practice to include a response field that explicitly indicates"
" success or failure of the service call.  Services often also include a "
"string field that can provide a more detailed description of the error to"
" the calling client."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:60
#: 434242de58a446f08a460fdaac414216
msgid ""
"Edit the package's CMakeLists.txt and package.xml to add dependencies on "
"key packages:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:62
#: 5c85c9974cdd40c6941e0b96cd479710
msgid ""
"The rosidl_default_generators package is required to build C++ code from "
"the .srv file created in the previous step"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:63
#: 8bafd1b79365482494402f63ccfc88ff
msgid ""
"The rosidl_default_runtime package provides runtime dependencies for new "
"messages"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:64
#: e49aad8b132a43e5b97179aa04089f8e
msgid ""
"geometry_msgs provides the Pose message type used in our service "
"definition"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:66
#: fcbb60f898e24f6186590957e62737b8
msgid ""
"Edit the package's CMakeLists.txt file to add the new build-time "
"dependencies alongside the existing find_package rules:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:73
#: fc26164f1ef64e1d90801779ec4e6cbb
msgid "Edit the package.xml file to add the appropriate build/run dependencies:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:81
#: c130160443f047d4b9054c7ec22b8cf9
msgid ""
"Also add a special tag that tells the ROS build system this package "
"defines ROS interfaces."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:87
#: ae3f2aff8bb94e2baa807179885a10b2
msgid ""
"This is generally placed with the package metadata, before the "
"dependencies."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:90
#: ef645e7c273c4051bc31684c98657016
msgid ""
"Edit the package's CMakeLists.txt to add rules to generate the new "
"service files:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:92
#: b8e6bda84022427685a6f438f04d5d6d
msgid ""
"The following CMake function is invoked with the service file you created"
" and creates the target to generate the interface-specific code:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:102
#: 0d00c8535a254d54a5c1b3a8b4173a45
msgid ""
"Right after rosidl_generate_interfaces, add the following line to enable "
"executables in this package to access your generated messages."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:108
#: f34f33244d734aefbd0ca7baaac747b1
msgid ""
"Add the following line after the call to ament_target_dependencies for "
"the the vision_node. This make the vision_node target depend on the "
"generated interface target so that the generated code can be used in the "
"node:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:114
#: 5c11150d8bae46fbb1b181df3100d805
msgid ""
"Now you have a service defined in you package and you can attempt to "
"build the code to generate the service:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:120
#: bf5ac28f1c1748fbb6ac7ad75be22e9d
msgid "Service Server"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:122
#: b63a09f0a0da4c1bb0d2d5f3df9c7e07
msgid "Edit vision_node.cpp; remember that the ros documentation is a resource."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:124
#: 93f777c2871e4a3ea988f9c35f411dd8
msgid "Add the header for the service we just created"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:130
#: c29afd1508654c04908f4be3b28d8c5a
msgid ""
"_Note the slightly different naming convention used for the Service "
"Definition (LocalizePart) and generated header file (localize_part.hpp)."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:132
#: 414640cc01644603889f77a64dc5a547
msgid ""
"In the Localizer class, create a callback method named localizePart. "
"Remember that your request and response types were defined in the "
"LocalizePart.srv file. The arguments to the callback function are the "
"request and response type, with the general structure of "
"Package::ServiceName::Request::SharedPtr or "
"Package::ServiceName::Response::SharedPtr."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:142
#: a6e9dbf01a904ed3aca4c33908e6f3bb
msgid ""
"Now add code to the localizePart callback function to fill in the Service"
" Response. Eventually, this callback will transform the pose received "
"from the fake_ar_publisher (in visionCallback) into the frame specifed in"
" the Service Request.  For now, we will skip the frame-transform, and "
"just pass through the data received from fake_ar_publisher.  Copy the "
"pose measurement received from fake_ar_publisher (saved to last_msg_) "
"directly to the Service Response."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:163
#: a6703ec40a964293ac7feb752c4b9b9a
msgid ""
"Now we need to create the server object that interfaces between this "
"callback function and other ROS nodes.  Add a roscpp::Service member "
"variable named server_ near the other Localizer class member variables:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:169
#: db8388e1db34497a83dcecb3d10a12cb
msgid "In the Localizer class constructor, initialize the server object:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:177
#: 98d94d7255d54d2f832f06670d199fd6
msgid ""
"Note the use of std::bind again to reference a callback function that is "
"a method of a class object. The use of two std::placeholders arguments "
"indicates the callback will have two arguments when it is called."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:179
#: addb2adb9c9b47dc9b7db1b2b5808336
msgid ""
"You should also comment out the RCLCPP_INFO call in your visionCallback "
"function, to avoid cluttering the screen with useless info."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:181
#: c1a440ff9fd4404fa396887fe257817f
msgid ""
"Build the updated vision_node, to make sure there are no compile errors."
"  You may see a warning about unused Service::req input... this is "
"expected, since we haven't yet used the request data in our callback "
"function."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:183
#: 4651c9c509f742e1abac19bba851659f
msgid "Service Client"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:185
#: f2554bccc0de486aa8a547862cc74ba8
msgid ""
"Create a new node (inside the myworkcell_core/src directory), named "
"myworkcell_node.cpp.  This will eventually be our main \"application "
"node\", that controls the sequence of actions in our Scan & Plan task.  "
"The first action we'll implement is to request the position of the AR "
"target from the Vision Node's LocalizePart service we created above."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:187
#: 485a54b16bb5492c828c5280ea94c457
msgid ""
"Be sure to include the standard ros header as well as the header for the "
"LocalizePart service:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:194
#: a3de07a8b7724e1691abc3cb1f9ca48a
msgid "Create a standard C++ main function, with typical ROS initialization:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:207
#: d72b076f94964a0a96a319ee69962d69
msgid ""
"Following best-practice guidance, we will create a new ScanNPlan class "
"(derived from rclcpp::Node) to contain the functionality of our new node."
"  Create a skeleton structure of this class, with an empty constructor "
"and a private area for some internal/private variables. Make sure to "
"place this above your main function."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:224
#: 1890e1b055fd417493c35b7dff7e190e
msgid ""
"Within your new ScanNPlan class, define a ROS Service Client as a private"
" member variable of the class.  This client object will allow us to "
"connect to the vision node's Service Server.  Initialize the Client in "
"the ScanNPlan constructor.  Both the service type (in the variable "
"declaration) and the service name (in the object constructor) should "
"match what we set up in the vision_node server earlier."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:241
#: e40f46461c1f4a8b8bf8a1927206d0cb
msgid ""
"Create a void function within the ScanNPlan class named start, with no "
"arguments. This will eventually contain most of our application workflow."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:257
#: c2c022d00dd04fa3bd02978e50674df4
msgid ""
"When the node is first created, it takes a few seconds to connect to "
"other nodes and detremine what services and topics are available.  "
"Attempting to call the service during this time may cause the call to "
"hang indefinitely.  Add a call to wait for the service to be available "
"before submitting the request:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:277
#: 0db91cdeade849b49122880dd3520a5e
msgid ""
"Now add code to prepare the request data and call the service.  For now, "
"the request fields are left empty.  They will be added in a later "
"exercise."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:304
#: bea05fef04d9494c8df6b110b6355c5e
msgid ""
"The async_send_request function is used on the vision_client_ object to "
"initiate the service call. Notice that it doesn't return a response "
"object, but instead, something called a future. This is because the "
"function immediately returns after sending the request and does not wait "
"for a response from the server. It is our responsibility to wait for the "
"response to arrive, which will be known by the future object becoming "
"'complete'."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:307
#: ae11ded1d5884a54810b25c65d4e42d8
msgid ""
"Now add the code that will wait until the service response arrives and "
"then prints the response.  This is a bit complex, because we are turning "
"the asynchronous ROS2 service call into a synchronous blocking call."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:346
#: 5c6b8a7782d74fcc8df49f900e588a30
msgid ""
"Note that the waiting function is a form of spinning, the same as the "
"rclcpp::spin function used in the vision_node. This spin function allows "
"the backend ROS code to run, listening for the incoming service response "
"and managing other node-maintenance tasks."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:347
#: 87b1631094894e0a9bb51f1139d4aa14
msgid ""
"Important: You can trigger deadlocks if you call ros \"spin\" functions "
"simultaneously in multiple places.  For example, you may need a more "
"complex \"spin\" design if you are attempting to wait for a service "
"response inside a subscriber's callback function.  There are ways around "
"this limitation but it is beyond the scope of this material."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:348
#: f7f241c8279b4da59493f5fcc3586a05
msgid ""
"An alternative to the synchronous wait shown above is to provide a "
"callback function along with the service request.  For some applications,"
" this asynchronous design might make more sense."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:350
#: 00cc539bf1fd4ba682b3cd96be8cf800
msgid ""
"Now back in myworkcell_node's main function, instantiate an object of the"
" ScanNPlan class and call the object's start function."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:358
#: 874e33290624447fa19d14ff45de89be
msgid ""
"Edit the package's CMakeLists.txt to build the new node (executable), "
"with its associated dependencies. Add the following rules to the "
"appropriate sections, directly under the matching rules for vision_node:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:367
#: c3b13a3e41644081920a76d59afb6590
msgid ""
"Also add myworkcell_node to the existing call to install along with "
"vision_node:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:375
#: 1aa35072c7854ed882641e99fe159a1c
msgid "Build the nodes to check for any compile-time errors:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:381
#: c10767df961849a783c08fc3ed23af97
msgid "Use New Service"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:383
#: 499258e1bae94dc1895f5734356e3068
msgid "Enter each of these commands in their own terminal:"
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:391
#: 1fc60ec2e24646dab10c2d8a42ef6951
msgid ""
"If you get errors that the ros2 commands can't find certain shared "
"objects or executables, try re-sourcing the setup file (source "
"~/ros2_ws/install/setup.bash).  This is required since we added a new "
"service-definition and a new node."
msgstr ""

#: ../../_source/session2/ros2/0-Services.md:392
#: 09486c6761464292930118db8d5acbbf
msgid ""
"The values reported by the localization service should match the values "
"published by the fake_ar_publisher node that you observed earlier "
"(through ros2 topic echo or rqt_plot)."
msgstr ""

