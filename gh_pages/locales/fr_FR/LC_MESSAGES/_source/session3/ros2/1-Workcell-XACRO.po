# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, ROS-Industrial
# This file is distributed under the same license as the Industrial Training
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Industrial Training \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-11 17:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:1
#: aaf04f73cdd8446898732013e09ba3dc
msgid "Workcell XACRO"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:2
#: 6c1820921206436586f35d336f0ecae8
msgid ""
"In this exercise, we will create an XACRO file representing a simple "
"robot workcell. This will demonstrate both URDF and XACRO elements."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:5
#: 3f54dab7ba5943d0b9126df01bd19193
msgid "Motivation"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:6
#: 1e053c99f0234b4a9057c4c026090b7a
msgid ""
"Writing URDFs that involve more than just a few elements can quickly "
"become a pain. Your file gets huge and duplicate items in your workspace "
"means copy-pasting a bunch of links and joints while having to change "
"their names just slightly. It’s really easy to make a mistake that may "
"(or may not) be caught at startup. It’d be nice if we could take some "
"guidance from programming languages themselves: define a component once, "
"then re-use it anywhere without excessive duplication. Functions and "
"classes do that for programs, and XACRO macros do that for URDFs. XACRO "
"has other cool features too, like a file include system (think #include),"
" constant variables, math expression evaluation (e.g., say PI/2.0 instead"
" of 1.57), and more."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:9
#: 8e0e7f5ba24a47ba877c44f941afaccc
msgid "Reference Example"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:11
#: aac1b922956841c29371f1750e687477
msgid "Cleaning Up URDF with XACRO Tutorial"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:13
#: 59e9e206ebc24a38adaf756440206f45
msgid "Further Information and Resources"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:15
#: 7ecbabde44fe409f9d1b019b0d18beda
msgid "Xacro Extension Documentation"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:17
#: ffcb0dbd8b804276868cf61293420cea
msgid "Creating a URDF for an Industrial Robot"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:19
#: df519260fc054a2db0d38ff8e3d7a11e
msgid "Scan-N-Plan Application: Problem Statement"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:20
#: b4137ac4d7f6460f889b1795ba67b5fe
msgid ""
"In the previous exercise we created a workcell consisting of only static "
"geometry. In this exercise, we'll add a UR5 robot assembly using XACRO "
"tools."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:22
#: 0261c76d7b1648ee999ee29d1f651bd5
msgid "Specifically, you will need to:"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:23
#: 4223870ba0a945c687ae6406067bfbe1
msgid ""
"Convert the *.urdf file you created in the previous sample into a XACRO "
"file with the xacro extension."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:24
#: 148287b7ad744fcda5111c75d8fa58c1
msgid "Include a file containing the xacro-macro definition of a UR5"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:25
#: 83515dcec481473ab7872f533ef44112
msgid "Instantiate a UR5 in your workspace and connect it to the table link."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:27
#: 6f445d68534842c38b567b6cbd49223b
msgid "Scan-N-Plan Application: Guidance"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:28
#: 0829bbe88b514f71a4500298f4677bff
msgid ""
"Rename the workcell.urdf file from the previous exercise to "
"workcell.urdf.xacro"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:30
#: d642a49ee11748749df39077c7b806ed
msgid ""
"We will be including a UR5 as our robot in the workcell. To do this, "
"we're going to bring in resources from UR that already define the robot "
"using xacro."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:32
#: d6daf6037b2c413faf5da77cc9d894f5
msgid ""
"Install the ur_description package into your ROS environment. For ROS 2 "
"Humble, it can be installed as an apt package."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:40
#: 21283e13c680410bae1a01e33c9d933a
msgid ""
"Inspect the UR-provided xacro files at "
"/opt/ros/humble/share/ur_description/urdf.  In particular, compare "
"ur_macro.xacro with ur.urdf.xacro.  This is a common design pattern: one "
"xacro file defines a macro that can be called to generate a component of "
"the workcell, while a different xacro file calls that macro to actually "
"create the final URDF model."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:42
#: 564c76ae7d9b4a6ead1a7867dd51530e
msgid ""
"Locate the xacro file that defines the \"ur_robot\" macro and include it "
"in your newly renamed workcell.urdf.xacro file.  Add this include line "
"near the top of your workcell.urdf.xacro file, beneath the <robot> tag:"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:48
#: 6cf36d9feabf42c5ba3190ed5cc03734
msgid ""
"If you explore the ur_macro definition file, or just about any other file"
" that defines a Xacro macro, you’ll find a lot of uses of ${tf_prefix} in"
" element names. Xacro evaluates anything inside a “${}” at run-time. It "
"can do basic math, and it can look up variables that come to it via "
"properties (ala-global variables) or macro parameters. Most macros will "
"take a “prefix” parameter to allow a user to create multiple instances of"
" said macro. It’s the mechanism by which we can make the eventual URDF "
"element names unique, otherwise we’d get duplicate link names and URDF "
"would complain."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:50
#: a8417262b54f487fa86dcd47a7a13d1d
msgid ""
"Including the ur_macro.xacro file does not actually create a UR5 robot in"
" our URDF model.  It defines a macro, but we still need to call the macro"
" to create the robot links and joints.  Note the use of the tf_prefix "
"tag, as discussed above.  An additional \"ur_type\" argument tells the "
"macro which model of UR-robot to generate."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:71
#: 89c7cfccbb614d6aa0c33e5cb80be2da
msgid ""
"Macros in Xacro are just fancy wrappers around copy-paste. You make a "
"macro and it gets turned into a chunk of links and joints. You typically "
"still have to connect the rest of your world to that macro’s results. "
"This means you have to look at the macro and see what the base link is "
"and what the end link is. Hopefully your macro follows a standard, like "
"the ROS-Industrial one, that says that base links are named “base_link” "
"and the last link is called “tool0”."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:73
#: dcb0c96c5b9a4fbba909c2bdd16e44e5
msgid ""
"In this example, the parent and origin parameters passed to the xacro are"
" used to automatically generate a link between the base of the robot and "
"the link we choose. Here we provide parent=\"table\" and <origin xyz=\"0 "
"0 0\" rpy=\"0 0 0\"/> to make the robot base link connect to our table "
"link without any offset or rotation."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:75
#: 776fd8fde30648d08cb3a45ddbd42b9f
msgid ""
"Create a new urdf.launch.py file (in the myworkcell_support package) to "
"load the URDF model and (optionally) display it in rviz. The launch file "
"starts with several utility functions that are useful for assisting the "
"launch process. This particular file uses get_package_file to get the "
"path of the workcell.urdf.xacro file you've created, and "
"xacro.process_file to generate the URDF as a string object. This URDF "
"string is then passed to a robot_state_publisher node as a parameter just"
" as was done manually in the previous exercise."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:118
#: 5a7c50437b814ad6a83c43cdd8cc80e2
msgid ""
"Rebuild your workspace and check the updated URDF in RViz, using the "
"launch file you just created:"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:120
#: 660d6f385a514e2ea864ded93fdc1cd9
msgid "ros2 launch myworkcell_support urdf.launch.py"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:122
#: de9816e4da7048d78224b91681be3424
msgid ""
"If you didn't save your RViz config last time, you may need to repeat the"
" configuration steps: set the 'Fixed Frame' to 'world' and add the "
"RobotModel and TF displays to the tree view on the left."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:123
#: da784676fbb54d009ae58db178a16709
msgid ""
"Try moving the joint sliders in the separate GUI window that appears to "
"see the UR5 robot move."
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:125
#: d104700f847a48a09f7198e9315d2da8
msgid "Challenge Exercise"
msgstr ""

#: ../../_source/session3/ros2/1-Workcell-XACRO.md:126
#: d6bc1bc276c04929acfecf8ef7d98843
msgid ""
"Try adding another instance of the robot model in the scene in a "
"different position and orienatation."
msgstr ""

