# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, ROS-Industrial
# This file is distributed under the same license as the Industrial Training
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Industrial Training \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-08-11 17:28+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:2
#: f7505f1106534bfeb0fb450c0af8f513
msgid "Building a Simple PCL Interface for Python"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:4
#: c18eb7f5313f4a7ea1121f85b49d23e2
msgid ""
"In this exercise, we will fill in the appropriate pieces of code to build"
" a perception pipeline. The end goal will be to create point cloud "
"filtering operations to demonstrate functionality between ROS and python."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:8
#: 88d42e4cdcea4291bd4573f5f500bf4d
msgid "Prepare New Workspace:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:10
#: 02a53c8bc033449fa7fd07d999bacc31
msgid ""
"We will create a new ROS 2 workspace, since this exercise does not "
"overlap with the previous ScanNPlan exercises."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:12
#: 82f38500b9de4179aa9f35ddd2324ef4
msgid ""
"Disable automatic sourcing of your previous workspace (if you have any) "
"in your ``.bashrc``."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:14
#: 32c386b5daf74b7eb3615eb11aa7fb65
msgid "Copy the template workspace layout and files:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:22
#: 3f3705597a8a46b9aa59350578052ee7
msgid "Initialize and Build this new workspace"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:30
#: ee46199502f04fcb9bf912d236e715cd
msgid "Source the workspace"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:36
#: b30f04de9a7f44bc8ba5092a5ea8e152
msgid "Download the PointCloud file and place the file in your home directory :"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:44
#: 17857098353644cd9984cf026115bdb7
msgid "Intro (Review Existing Code)"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:46
#: ef28359522a845938edb9e7c24c42065
msgid ""
"Most of the infrastructure for a ROS 2 node has already been completed "
"for you; the focus of this exercise is the perception algorithms/pipeline"
" and the use of a pure Python ROS package. There are two packages "
"provided for you: ``py_perception`` and ``filter_call``."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:48
#: af71014010dc4a6d857b55b138cfba36
msgid ""
"At this time we will explore the source code that has been provided in "
"the ``py_perception_node.cpp`` file. This tutorial has been modified from"
" training `Exercise 5.1 Building a Perception Pipeline <http://ros-"
"industrial.github.io/industrial_training/_source/session5/Building-a"
"-Perception-Pipeline.html>`__ and as such the C++ code has already been "
"set up. Open the ``perception_node.cpp`` file and review the filtering "
"functions."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:50
#: b1dd5553035f446fba9500aff3229f9c
msgid ""
"For an extra challenge, after completing exercise 5.1, try adding the "
"missing filters into our new ``py_perception_node`` here."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:53
#: 83d584bc4ed642e7acc52318e88677dc
msgid "Using a Python Package"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:55
#: 3fec7e5781ba4197912d10ab20fe4eba
msgid ""
"Now that we have converted several filters to C++ functions, we are ready"
" to call it from a Python node."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:57
#: 624dece3e66b41eaa8c96187fa98e8de
msgid ""
"Take a look at the ``filter_call`` package and note the differences in "
"structure between a pure Python package and a C++ package."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:59
#: 7e56d561cdac4b56a057d64c49b13ca1
msgid ""
"We will not be including ‘perception_msgs’ as a dependency as we will not"
" be creating custom messages in this course. If you wish for a more in "
"depth explanation including how to implement custom messages, `MIT has a "
"resource <http://duckietown.mit.edu/media/pdfs/1rpRisFoCYUm0XT78j-"
"nAYidlh-cDtLCdEbIaBCnx9ew.pdf>`__ on the steps taken."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:61
#: 348c82c1966d4b449a76490aa916ff72
msgid ""
"Notice that instead of a ``CMakeLists.txt`` file we have ``setup.cfg`` "
"and ``setup.py``. The ``setup.py`` file functions similarly to a "
"``CMakeLists.txt`` and ``setup.cfg`` tells the package where our scripts "
"will be installed. In order for this folder to be accessed by any other "
"python script, the ``__init__.py`` file must exist. In this example, it "
"is located at ``filter_call/filter_call/__init__.py``. "
"``filter_call/filter_call`` is also where our scripts will live."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:65
#: cecc9cdf40db4104b04862fab1182cce
msgid "Publishing the Point Cloud"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:67
#: 16267749870e4456b021ec569b06b613
msgid ""
"As mentioned above, we are creating a ROS 2 C++ node to filter the point "
"cloud when requested by a Python node running a service request for each "
"filtering operation, resulting in a new, aggregated point cloud.  Let’s "
"start by modifying our C++ code to publish in a manner supportive to "
"Python."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:70
#: aeb0532865264f80b52487848b875876
msgid "Implement a Voxel Filter"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:72
#: 85358b9847c240669d18b5ae1921ff25
msgid ""
"In ``py_perception_node.cpp``, take notice of the function called "
"``filterCallBack``. This function will be the entry point for all service"
" calls made by the Python client in order to run point cloud filtering "
"operations."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:120
#: 26d0cb20c37848c291768919b134088d
msgid ""
"Now that we have the framework for the filtering on the server side, "
"let's start setting up the client side. Find and open the script "
"``filter_call.py`` in your ``filter_call`` package."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:122
#: 8d5cde9d7c164d5f9474613dc5d75317
msgid ""
"Examine the provided code and functions in the script. Take note of some "
"similarities and differences between how the Python node is set up versus"
" a C++ node."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:125
#: 4ff385d774b14d9eb6596ca38217762b
msgid ""
"Call the service to apply a Voxel Grid filter. Find the function for "
"applying a voxel grid filter and insert the following code below the "
"banner"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:133
#: b98bef2574f64b89a9657283d35f8540
msgid ""
"We first create a service request of type FilterCloud and populate it "
"with the necessary information:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:147
#: de25dd76dc204b07b2a1261be24dd7d5
msgid "Next we can send a request to the server node and wait for a response:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:158
#: e79a88833c5046eb84cbee6ad4585689
msgid "Finally, we publish our new filtered point cloud:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:167
#: af1ad99d6a91461ca4c9025d18baf841
msgid ""
"Before running our new node, we need to make the Python file executable. "
"Open ``setup.py`` and modify ``entry_points`` to read"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:176
#: b6c3c9bcd55c48929375597351165f16
msgid "Re-build and re-source your workspace."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:180
#: 5def6f2c6ef54bb88d675c0718eec31d
msgid "Viewing Results"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:182
#: bd628f24f86047af9cb4b99ca34b0e7d
msgid ""
"In your terminal, source a new terminal and run the C++ filter service "
"node"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:188
#: 05c88c34520d4316b48cd5cbc9e5db96
msgid ""
"Source a new terminal and run the ``tf2_ros`` package to publish a static"
" coordinate transform from the child frame to the world frame"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:194
#: 4f0ea6f3885a49c0a8521874627c4d2e
msgid ""
"Source a new terminal and run the Python service client node. Note your "
"file path may be different."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:200
#: 80391bf77ccc49b693fb53ce2cf688df
msgid "Source a new terminal and run Rviz"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:206
#: 1d8dbf120016442d84a40f0f5d3b5ff4
msgid "Add a new PointCloud2 in Rviz"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:208
#: 8fd9f1e8f83d431b9f5df8a1137eb935
msgid ""
"In global options, change the fixed frame to **kinect_link** or "
"**world_frame**, and in the PointCloud 2, select your topic to be "
"'/perception_voxelGrid'"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:210
#: ee1707086ff84d189c521823c498c8ef
msgid "You should be able to see your filtered point cloud in Rviz."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:214
#: 88e959003ff84f90adb66f98fac50330
msgid "Implement Pass-Through Filters"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:216
#: 4d269c1e292f46c2a0a24c665872eda9
msgid ""
"In ``py_perception_node.cpp`` in the ``py_perception`` package, update "
"the switch to also take a ``PASSTHROUGH`` option like below:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:240
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:309
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:376
#: 3e53d20250474e84addaab858d8496ac 48686d7ff26b49df8d3e1a9f8e6b09b0
#: 6d183361dff84705a244b77e233667b7
msgid "Save and build"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:243
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:311
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:379
#: ce02c1399c3f4d4cb0844cee68277ae6 dcecbacea45342f5943adce360cd4b02
#: dedddd15371840a29c8318e7c018d6f8
msgid "**Edit the Python Code**"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:246
#: edcbc6970b6344efade2b2f2ad9d7dad
msgid ""
"Open the python node and copy paste the following code inside the "
"``passthrough_filter`` function under the banner.  Keep care to maintain "
"indents:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:254
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:321
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:390
#: 3b292e36e2c040b68634c81e686d4cc2 9416592f534b4809af58f89f236a804d
#: e96e3ddb6ccc4b63885815534594a768
msgid ""
"Again, we need to first create and populate our FilterCloud service "
"request:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:263
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:330
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:399
#: 74ec40f52a5345c5ae307a3f37b26772 7c319e4dfd9947b9ad8b5c96f576aa3b
#: d62dac983e684988b64ecbab0798f2af
msgid "Next we call the server and wait for a response:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:274
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:341
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:410
#: 039c37c06c914055ba1125960e60657a 5b8f56866aa44d41aa62a9464b8f20a4
#: c17f70ef293f4bbc9a998ae130698071
msgid "Finally we publish our result:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:282
#: 743cf8a35cd04d9e8d84a38ce512e71f
msgid ""
"Save and run from the terminal, repeating steps outlined for the voxel "
"filter."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:284
#: 013fa3a4f9a745859f9c040d212febb8
msgid ""
"Within Rviz, compare PointCloud2 displays based on the the previous voxel"
" grid filter and your new point cloud."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:286
#: d6581840972449c8a6023b7013e742be
msgid ""
"When you are satisfied with the pass-through filter results, press Ctrl+C"
" to kill the node. There is no need to close or kill the other "
"terminals/nodes."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:288
#: f33d8b40fd2a4f778159cc4cde132aac
msgid ""
"Did you forget to create a new publisher for the passthrough filter? And "
"did you remember to call ``pasthrough_filter()``? Try taking a look at "
"where we create ``voxel_pub`` and call ``voxel_filter()`` for help."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:292
#: e28c3fb30cd7429399e4986d8aa99301
msgid "Plane Segmentation"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:294
#: a8359d708d4449f0b0246049d0e565aa
msgid ""
"This method is one of the most useful for any application where the "
"object is on a flat surface. In order to isolate the objects on a table, "
"you perform a plane fit to the points, which finds the points which "
"comprise the table, and then subtract those points so that you are left "
"with only points corresponding to the object(s) above the table. This is "
"the most complicated PCL method we will be using and it is actually a "
"combination of two: the RANSAC segmentation model, and the extract "
"indices tool. An in depth example can be found on the `PCL Plane Model "
"Segmentation Tutorial "
"<https://pcl.readthedocs.io/projects/tutorials/en/latest/planar_segmentation.html>`__;"
" otherwise you can copy the below code snippet."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:297
#: 1afe0a7e38f94fe4908ada0ad347c364
msgid ""
"In ``py_perception_node.cpp``, update the switch statement in "
"``filterCallback`` to also take a ``PLANESEGMENTATION`` option:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:313
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:382
#: 479e5bf130264df8aa43ae0f04f04cd7 8f9b295716364064b0bfbc426f4291fe
msgid ""
"Open the python node and copy paste the following code inside the "
"``plane_segmentation`` function under the banner.  Keep care to maintain "
"indents:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:350
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:419
#: 1c0a334038ee4f5ebbbe891475b6dbe1 ae6a3df1104e4dcea05760df6f9b5619
msgid "Save and run from the terminal, repeating steps outlined above."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:352
#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:421
#: 5c1581e68d5a4c839ef6461a5c268bd7 c29c80ed088b48cbadc073d25e5a7606
msgid ""
"Within Rviz, compare PointCloud2 displays based on your previous filters "
"and your new one."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:354
#: 36205bdad5194ffebd4f24a808f52ea1
msgid ""
"When you are done viewing the results you can go back and change the "
"``setMaxIterations`` and ``setDistanceThreshold`` parameter values to "
"control how tightly the plane-fit classifies data as inliers/outliers, "
"and view the results again. Try using values of ``maxIterations=100`` and"
" ``distThreshold=0.010``"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:356
#: ca2cc910efd94bbab79e5705bb4fb78b
msgid ""
"When you are satisfied with the plane segmentation results, use Ctrl+C to"
" kill the node. There is no need to close or kill the other "
"terminals/nodes."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:360
#: 0310fc70b5a245c7966477a8121d7af7
msgid "Euclidian Cluster Extraction"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:362
#: 7efa497b291b4f85bb1fb069f91aa084
msgid ""
"This method is useful for any application where there are multiple "
"objects. This is also a complicated PCL method. An in depth example can "
"be found on the `PCL Euclidean Cluster Extration Tutorial "
"<https://pcl.readthedocs.io/en/latest/cluster_extraction.html>`_."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:365
#: 4ed1ff5c65374435a61f59fa3773682d
msgid ""
"In ``py_perception_node.cpp``, update the switch statement in "
"``filterCallback`` to to also take a ``CLUSTEREXTRACTION`` option:"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:423
#: f674cb8d3f4f45bfa8ff81f399cf35c3
msgid ""
"When you are satisfied with the cluster extraction results, use Ctrl+C to"
" kill the node. If you are done experimenting with this tutorial, you can"
" kill the nodes running in the other terminals."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:427
#: 885aeadb681d49b89efba081fff3233e
msgid "Future Study"
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:429
#: 618eea3ac5c64599aace21800460c128
msgid ""
"For an extra challenge, you can convert the remaining filters from "
"Exercise 5.1 into callable functions and add options to call them in your"
" service and Python node."
msgstr ""

#: ../../_source/session5/Simple-PCL-Interface-for-Python.rst:431
#: ebf62b2538e24a299d2e5ee0eaac8676
msgid ""
"Additionally, the Python code was repeated for each filtering intance for"
" simplicity. Another option is to create a loop or function to replace "
"the repeated chunks of code. Feel free to play around with these options "
"to better refine your code."
msgstr ""

